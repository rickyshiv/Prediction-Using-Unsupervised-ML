## DATA SCIENCE AND BUSINESS ANALYTICS INTERN
## TASK 2 :- PREDICTION USING UNSUPERVISED MACHINE LEARNING
## From the given ‘Iris’ dataset, predict the optimum number of clusters
## and represent it visually.

## By Ricky Shivdasani

# importing all the libraries required in this task 
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
%matplotlib inline

# Now reading data from iris dataset
data_taken=pd.read_csv("Downloads\\Iris.csv")
print("THE DATA HAS BEEN TAKEN SUCCESSFULLY \n")
print(data_taken)
print("\n")
print("THE TOP 5 ELEMENTS ARE")\
# head(5) will display the top 5 elements
data_taken.head(5)



print("Now take an account into info of dataset\n")
data_taken.info()
# info() is used for information
print("\n")
# describe() is used to describe the data
print("THE DESCRIBED VIEW OF DATA IS\n")
data_taken.describe()

# Now dividing the data into dependent and independent variables
x=data_taken.iloc[:,[1,4]].values

## Now Finding Optimal Number Of Clusters for the dataset

from sklearn.cluster import KMeans
wcss = []

for i in range(1, 11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', 
                    max_iter = 300, n_init = 10, random_state = 0)
    kmeans.fit(x)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 11), wcss)
plt.title('The elbow method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS') 
plt.show()


# Now we will train the model 
kmeans=KMeans(n_clusters=3,init='k-means++',random_state=0)
y_means=kmeans.fit_predict(x)
print(y_means)

# Representing the optimal clusters
plt.scatter(x[y_means == 0, 0], x[y_means == 0, 1], 
            s = 100, c = 'blue', label = 'Iris-setosa')
plt.scatter(x[y_means == 1, 0], x[y_means == 1, 1], 
            s = 100, c = 'green', label = 'Iris-versicolour')
plt.scatter(x[y_means == 2, 0], x[y_means == 2, 1],
            s = 100, c = 'red', label = 'Iris-virginica')

# Now Plotting the centroids of the clusters
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], 
            s = 100, c = 'yellow', label = 'Centroids')

plt.legend()
#legend() A legend is an area describing the elements of the graph.
# In the matplotlib library, there's a function called legend() which is used to Place a legend on the axes.


